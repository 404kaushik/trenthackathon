{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100,\n  shootingStarCount = 5\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    for (let i = 0; i < starCount; i++) {\n      vertices.push(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n    }\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    const material = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 2\n    });\n    const stars = new THREE.Points(geometry, material);\n    scene.add(stars);\n    const createShootingStar = () => {\n      const start = new THREE.Vector3(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n      const end = new THREE.Vector3(start.x - 2000 * Math.random(), start.y - 2000 * Math.random(), start.z);\n      const curve = new THREE.CatmullRomCurve3([start, end]);\n      const tubeGeometry = new THREE.TubeGeometry(curve, 64, 0.1, 8, false);\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          color: {\n            value: new THREE.Color(0xffffff)\n          },\n          time: {\n            value: 0\n          }\n        },\n        vertexShader: `\n                    varying vec3 vPosition;\n                    void main() {\n                        vPosition = position;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n        fragmentShader: `\n                    uniform vec3 color;\n                    uniform float time;\n                    varying vec3 vPosition;\n                    void main() {\n                        float alpha = 1.0 - (vPosition.z / 1000.0);\n                        gl_FragColor = vec4(color, alpha);\n                    }\n                `,\n        transparent: true\n      });\n      const shootingStarLine = new THREE.Mesh(tubeGeometry, shaderMaterial);\n      scene.add(shootingStarLine);\n      return {\n        line: shootingStarLine,\n        speed: 5 + Math.random() * 5,\n        start,\n        end\n      };\n    };\n    const activeShootingStars = [];\n    camera.position.z = 5;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.rotation.x += 0.001;\n      stars.rotation.y += 0.001;\n      activeShootingStars.forEach((star, index) => {\n        const direction = new THREE.Vector3().subVectors(star.end, star.start).normalize();\n        star.line.position.add(direction.multiplyScalar(star.speed));\n        star.line.material.uniforms.time.value += 0.1;\n        if (star.line.position.distanceTo(star.end) < 10) {\n          scene.remove(star.line);\n          activeShootingStars.splice(index, 1);\n        }\n      });\n      if (Math.random() < 0.01) {\n        activeShootingStars.push(createShootingStar());\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [starCount, shootingStarCount]);\n  useEffect(() => {\n    const starCount = 45;\n    const shootingStarInterval = 8000;\n    function createStar() {\n      const star = document.createElement(\"div\");\n      star.className = \"star\";\n      star.style.top = `${Math.random() * 100}%`;\n      star.style.left = `${Math.random() * 100}%`;\n      document.getElementById(\"stars\").appendChild(star);\n    }\n    function createShootingStar() {\n      const shootingStar = document.createElement(\"div\");\n      shootingStar.className = \"shooting-star\";\n      shootingStar.style.top = `${Math.random() * 100}%`;\n      shootingStar.style.left = `${Math.random() * 100}%`;\n      document.body.appendChild(shootingStar);\n      setTimeout(() => {\n        document.body.removeChild(shootingStar);\n      }, 3000);\n    }\n    function generateStars() {\n      for (let i = 0; i < starCount; i++) {\n        createStar();\n      }\n    }\n    generateStars();\n    setTimeout(createShootingStar, Math.random() * shootingStarInterval);\n    function randomizeShootingStarInterval() {\n      const interval = Math.random() * shootingStarInterval;\n      setTimeout(function () {\n        createShootingStar();\n        randomizeShootingStarInterval();\n      }, interval);\n    }\n    randomizeShootingStarInterval();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n_s(Stars, \"F31R4KojS3GBmgP08zZIju4WW6M=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","Stars","starCount","shootingStarCount","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","geometry","BufferGeometry","vertices","i","push","MathUtils","randFloatSpread","setAttribute","Float32BufferAttribute","material","PointsMaterial","color","size","stars","Points","add","createShootingStar","start","Vector3","end","x","Math","random","y","z","curve","CatmullRomCurve3","tubeGeometry","TubeGeometry","shaderMaterial","ShaderMaterial","uniforms","value","Color","time","vertexShader","fragmentShader","transparent","shootingStarLine","Mesh","line","speed","activeShootingStars","position","animate","requestAnimationFrame","rotation","forEach","star","index","direction","subVectors","normalize","multiplyScalar","distanceTo","remove","splice","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeChild","removeEventListener","shootingStarInterval","createStar","document","createElement","className","style","top","left","getElementById","shootingStar","body","setTimeout","generateStars","randomizeShootingStarInterval","interval","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst Stars = ({ starCount = 100, shootingStarCount = 5 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current.appendChild(renderer.domElement);\n\n        const geometry = new THREE.BufferGeometry();\n        const vertices = [];\n\n        for (let i = 0; i < starCount; i++) {\n            vertices.push(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n        }\n\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n        const material = new THREE.PointsMaterial({ color: 0xffffff, size: 2 });\n        const stars = new THREE.Points(geometry, material);\n        scene.add(stars);\n\n        const createShootingStar = () => {\n            const start = new THREE.Vector3(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n\n            const end = new THREE.Vector3(\n                start.x - 2000 * Math.random(),\n                start.y - 2000 * Math.random(),\n                start.z\n            );\n\n            const curve = new THREE.CatmullRomCurve3([start, end]);\n            const tubeGeometry = new THREE.TubeGeometry(curve, 64, 0.1, 8, false);\n            const shaderMaterial = new THREE.ShaderMaterial({\n                uniforms: {\n                    color: { value: new THREE.Color(0xffffff) },\n                    time: { value: 0 }\n                },\n                vertexShader: `\n                    varying vec3 vPosition;\n                    void main() {\n                        vPosition = position;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n                fragmentShader: `\n                    uniform vec3 color;\n                    uniform float time;\n                    varying vec3 vPosition;\n                    void main() {\n                        float alpha = 1.0 - (vPosition.z / 1000.0);\n                        gl_FragColor = vec4(color, alpha);\n                    }\n                `,\n                transparent: true\n            });\n            const shootingStarLine = new THREE.Mesh(tubeGeometry, shaderMaterial);\n            scene.add(shootingStarLine);\n\n            return { line: shootingStarLine, speed: 5 + Math.random() * 5, start, end };\n        };\n\n        const activeShootingStars = [];\n\n        camera.position.z = 5;\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            stars.rotation.x += 0.001;\n            stars.rotation.y += 0.001;\n\n            activeShootingStars.forEach((star, index) => {\n                const direction = new THREE.Vector3().subVectors(star.end, star.start).normalize();\n                star.line.position.add(direction.multiplyScalar(star.speed));\n                star.line.material.uniforms.time.value += 0.1;\n\n                if (star.line.position.distanceTo(star.end) < 10) {\n                    scene.remove(star.line);\n                    activeShootingStars.splice(index, 1);\n                }\n            });\n\n            if (Math.random() < 0.01) {\n                activeShootingStars.push(createShootingStar());\n            }\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [starCount, shootingStarCount]);\n\n    useEffect(() => {\n        const starCount = 45;\n        const shootingStarInterval = 8000;\n\n        function createStar() {\n            const star = document.createElement(\"div\");\n            star.className = \"star\";\n            star.style.top = `${Math.random() * 100}%`;\n            star.style.left = `${Math.random() * 100}%`;\n            document.getElementById(\"stars\").appendChild(star);\n        }\n\n        function createShootingStar() {\n            const shootingStar = document.createElement(\"div\");\n            shootingStar.className = \"shooting-star\";\n            shootingStar.style.top = `${Math.random() * 100}%`;\n            shootingStar.style.left = `${Math.random() * 100}%`;\n            document.body.appendChild(shootingStar);\n            setTimeout(() => {\n                document.body.removeChild(shootingStar);\n            }, 3000);\n        }\n\n        function generateStars() {\n            for (let i = 0; i < starCount; i++) {\n                createStar();\n            }\n        }\n\n        generateStars();\n        setTimeout(createShootingStar, Math.random() * shootingStarInterval);\n\n        function randomizeShootingStarInterval() {\n            const interval = Math.random() * shootingStarInterval;\n            setTimeout(function() {\n                createShootingStar();\n                randomizeShootingStarInterval();\n            }, interval);\n        }\n\n        randomizeShootingStarInterval();\n    }, []);\n\n    return (\n        <div>\n            <div id=\"stars\"></div>\n            <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>\n        </div>\n    );\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}