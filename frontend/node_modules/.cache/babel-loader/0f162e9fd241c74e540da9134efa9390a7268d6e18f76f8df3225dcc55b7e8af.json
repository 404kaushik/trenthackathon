{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100\n}) => {\n  _s();\n  const ref = useRef(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: ref.current,\n      antialias: true\n    });\n    const stars = Array.from({\n      length: starCount\n    }).map((_, index) => {\n      const geometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      const star = new THREE.Mesh(geometry, material);\n      star.position.x = Math.random() * 100 - 50;\n      star.position.y = Math.random() * 100 - 50;\n      star.position.z = Math.random() * 100 - 50;\n      scene.add(star);\n      return star;\n    });\n    camera.position.z = 5;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.forEach(star => {\n        star.rotation.x += 0.001;\n        star.rotation.y += 0.001;\n      });\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, [ref, starCount]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n_s(Stars, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","Stars","starCount","_s","ref","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","antialias","stars","Array","from","length","map","_","index","geometry","SphereGeometry","material","MeshBasicMaterial","color","star","Mesh","position","x","Math","random","y","z","add","animate","requestAnimationFrame","forEach","rotation","render","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/App.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst Stars = ({ starCount = 100 }) => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (!ref.current) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: ref.current,\n      antialias: true,\n    });\n\n    const stars = Array.from({ length: starCount }).map((_, index) => {\n      const geometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n      const star = new THREE.Mesh(geometry, material);\n\n      star.position.x = Math.random() * 100 - 50;\n      star.position.y = Math.random() * 100 - 50;\n      star.position.z = Math.random() * 100 - 50;\n\n      scene.add(star);\n\n      return star;\n    });\n\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      stars.forEach((star) => {\n        star.rotation.x += 0.001;\n        star.rotation.y += 0.001;\n      });\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, [ref, starCount]);\n\n  return <canvas ref={ref} />;\n};\n\nexport default Stars;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,KAAK,GAAGA,CAAC;EAAEC,SAAS,GAAG;AAAI,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAMC,GAAG,GAAGR,MAAM,CAAC,IAAI,CAAC;EAExBC,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,GAAG,CAACC,OAAO,EAAE;IAElB,MAAMC,KAAK,GAAG,IAAIR,KAAK,CAACS,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIV,KAAK,CAACW,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjG,MAAMC,QAAQ,GAAG,IAAIf,KAAK,CAACgB,aAAa,CAAC;MACvCC,MAAM,EAAEX,GAAG,CAACC,OAAO;MACnBW,SAAS,EAAE;IACb,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAElB;IAAU,CAAC,CAAC,CAACmB,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;MAChE,MAAMC,QAAQ,GAAG,IAAI1B,KAAK,CAAC2B,cAAc,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;MACtD,MAAMC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,iBAAiB,CAAC;QAAEC,KAAK,EAAE;MAAS,CAAC,CAAC;MACjE,MAAMC,IAAI,GAAG,IAAI/B,KAAK,CAACgC,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;MAE/CG,IAAI,CAACE,QAAQ,CAACC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;MAC1CL,IAAI,CAACE,QAAQ,CAACI,CAAC,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;MAC1CL,IAAI,CAACE,QAAQ,CAACK,CAAC,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;MAE1C5B,KAAK,CAAC+B,GAAG,CAACR,IAAI,CAAC;MAEf,OAAOA,IAAI;IACb,CAAC,CAAC;IAEFrB,MAAM,CAACuB,QAAQ,CAACK,CAAC,GAAG,CAAC;IAErB,MAAME,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAE9BrB,KAAK,CAACuB,OAAO,CAAEX,IAAI,IAAK;QACtBA,IAAI,CAACY,QAAQ,CAACT,CAAC,IAAI,KAAK;QACxBH,IAAI,CAACY,QAAQ,CAACN,CAAC,IAAI,KAAK;MAC1B,CAAC,CAAC;MAEFtB,QAAQ,CAAC6B,MAAM,CAACpC,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAED8B,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAAClC,GAAG,EAAEF,SAAS,CAAC,CAAC;EAEpB,oBAAOF,OAAA;IAAQI,GAAG,EAAEA;EAAI;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7B,CAAC;AAAC3C,EAAA,CA5CIF,KAAK;AAAA8C,EAAA,GAAL9C,KAAK;AA8CX,eAAeA,KAAK;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}