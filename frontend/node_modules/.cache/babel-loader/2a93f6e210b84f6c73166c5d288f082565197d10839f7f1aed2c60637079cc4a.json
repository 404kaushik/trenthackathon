{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100,\n  shootingStarCount = 5,\n  planetCount = 3\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    // Create star field\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    for (let i = 0; i < starCount; i++) {\n      vertices.push(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n    }\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    const material = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 2\n    });\n    const stars = new THREE.Points(geometry, material);\n    scene.add(stars);\n\n    // Create shooting stars\n    const shootingStars = [];\n    for (let i = 0; i < shootingStarCount; i++) {\n      const starGeometry = new THREE.SphereGeometry(0.1, 24, 24);\n      const starMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      const shootingStar = new THREE.Mesh(starGeometry, starMaterial);\n      shootingStar.position.set(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n      shootingStars.push(shootingStar);\n      scene.add(shootingStar);\n    }\n\n    // Create interactive planets\n    const planets = [];\n    for (let i = 0; i < planetCount; i++) {\n      const planetGeometry = new THREE.SphereGeometry(1, 32, 32);\n      const planetMaterial = new THREE.MeshStandardMaterial({\n        color: new THREE.Color(`hsl(${Math.random() * 360}, 100%, 50%)`)\n      });\n      const planet = new THREE.Mesh(planetGeometry, planetMaterial);\n      planet.position.set(THREE.MathUtils.randFloatSpread(100), THREE.MathUtils.randFloatSpread(100), THREE.MathUtils.randFloatSpread(100));\n      planets.push(planet);\n      scene.add(planet);\n    }\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    const onMouseMove = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n    window.addEventListener('mousemove', onMouseMove, false);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    camera.add(pointLight);\n    scene.add(camera);\n    camera.position.z = 10;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.rotation.x += 0.001;\n      stars.rotation.y += 0.001;\n      shootingStars.forEach(star => {\n        star.position.x -= 0.5;\n        star.position.y -= 0.5;\n        if (star.position.x < -1000 || star.position.y < -1000) {\n          star.position.set(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n        }\n      });\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(planets);\n      planets.forEach(planet => {\n        planet.material.emissive.setHex(0x000000);\n      });\n      intersects.forEach(intersect => {\n        intersect.object.material.emissive.setHex(0xff0000);\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', onMouseMove);\n    };\n  }, [starCount, shootingStarCount, planetCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 12\n  }, this);\n};\n_s(Stars, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","Stars","starCount","shootingStarCount","planetCount","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","controls","geometry","BufferGeometry","vertices","i","push","MathUtils","randFloatSpread","setAttribute","Float32BufferAttribute","material","PointsMaterial","color","size","stars","Points","add","shootingStars","starGeometry","SphereGeometry","starMaterial","MeshBasicMaterial","shootingStar","Mesh","position","set","planets","planetGeometry","planetMaterial","MeshStandardMaterial","Color","Math","random","planet","raycaster","Raycaster","mouse","Vector2","onMouseMove","event","x","clientX","y","clientY","addEventListener","ambientLight","AmbientLight","pointLight","PointLight","z","animate","requestAnimationFrame","rotation","forEach","star","setFromCamera","intersects","intersectObjects","emissive","setHex","intersect","object","update","render","handleResize","aspect","updateProjectionMatrix","removeChild","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst Stars = ({ starCount = 100, shootingStarCount = 5, planetCount = 3 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current.appendChild(renderer.domElement);\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n\n        // Create star field\n        const geometry = new THREE.BufferGeometry();\n        const vertices = [];\n\n        for (let i = 0; i < starCount; i++) {\n            vertices.push(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n        }\n\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n        const material = new THREE.PointsMaterial({ color: 0xffffff, size: 2 });\n        const stars = new THREE.Points(geometry, material);\n        scene.add(stars);\n\n        // Create shooting stars\n        const shootingStars = [];\n        for (let i = 0; i < shootingStarCount; i++) {\n            const starGeometry = new THREE.SphereGeometry(0.1, 24, 24);\n            const starMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n            const shootingStar = new THREE.Mesh(starGeometry, starMaterial);\n            shootingStar.position.set(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n            shootingStars.push(shootingStar);\n            scene.add(shootingStar);\n        }\n\n        // Create interactive planets\n        const planets = [];\n        for (let i = 0; i < planetCount; i++) {\n            const planetGeometry = new THREE.SphereGeometry(1, 32, 32);\n            const planetMaterial = new THREE.MeshStandardMaterial({ color: new THREE.Color(`hsl(${Math.random() * 360}, 100%, 50%)`) });\n            const planet = new THREE.Mesh(planetGeometry, planetMaterial);\n            planet.position.set(\n                THREE.MathUtils.randFloatSpread(100),\n                THREE.MathUtils.randFloatSpread(100),\n                THREE.MathUtils.randFloatSpread(100)\n            );\n            planets.push(planet);\n            scene.add(planet);\n        }\n\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2();\n\n        const onMouseMove = (event) => {\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        };\n\n        window.addEventListener('mousemove', onMouseMove, false);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n\n        const pointLight = new THREE.PointLight(0xffffff, 1);\n        camera.add(pointLight);\n        scene.add(camera);\n\n        camera.position.z = 10;\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            stars.rotation.x += 0.001;\n            stars.rotation.y += 0.001;\n\n            shootingStars.forEach((star) => {\n                star.position.x -= 0.5;\n                star.position.y -= 0.5;\n                if (star.position.x < -1000 || star.position.y < -1000) {\n                    star.position.set(\n                        THREE.MathUtils.randFloatSpread(2000),\n                        THREE.MathUtils.randFloatSpread(2000),\n                        THREE.MathUtils.randFloatSpread(2000)\n                    );\n                }\n            });\n\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(planets);\n            planets.forEach((planet) => {\n                planet.material.emissive.setHex(0x000000);\n            });\n            intersects.forEach((intersect) => {\n                intersect.object.material.emissive.setHex(0xff0000);\n            });\n\n            controls.update();\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n            window.removeEventListener('resize', handleResize);\n            window.removeEventListener('mousemove', onMouseMove);\n        };\n    }, [starCount, shootingStarCount, planetCount]);\n\n    return <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>;\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}