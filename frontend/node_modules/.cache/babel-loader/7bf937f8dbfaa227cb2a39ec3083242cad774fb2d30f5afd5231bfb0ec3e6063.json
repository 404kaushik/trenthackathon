{"ast":null,"code":"require(\"dotenv\").config();\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst jwt = require('jsonwebtoken'); // Import JWT for authentication\nconst userRoutes = require('./routes/users');\nconst authRoutes = require(\"./routes/auth\");\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json()); // In case you need to handle JSON payloads\n\n// MongoDB URI\nconst uri = process.env.MONGODB_URI || \"your-mongodb-uri-here\";\nasync function connect() {\n  try {\n    await mongoose.connect(uri); // No need for useNewUrlParser or useUnifiedTopology\n    console.log(\"Connected to MongoDB\");\n  } catch (error) {\n    console.error(\"Error connecting to MongoDB:\", error.message);\n    process.exit(1); // Exit the process with failure if connection fails\n  }\n}\n\n// Start the MongoDB connection\nconnect();\n\n// Middleware to verify JWT and extract user ID (if using JWT)\nconst authenticateToken = (req, res, next) => {\n  var _req$header;\n  const token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.split(' ')[1];\n  if (!token) return res.sendStatus(401);\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n\n// Route to get the first name of the logged-in user\napp.get('/api/users/firstname', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id); // Assuming req.user.id contains the user's ID\n    if (!user) return res.status(404).json({\n      message: 'User not found'\n    });\n    res.json({\n      firstname: user.firstname\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// routes\napp.use(\"/api/users\", userRoutes);\napp.use(\"/api/auth\", authRoutes);\n\n// Start the server\napp.listen(8000, () => {\n  console.log(\"Server is running on port 8000\");\n});","map":{"version":3,"names":["require","config","express","mongoose","cors","jwt","userRoutes","authRoutes","app","use","json","uri","process","env","MONGODB_URI","connect","console","log","error","message","exit","authenticateToken","req","res","next","_req$header","token","header","split","sendStatus","verify","JWT_SECRET","err","user","get","User","findById","id","status","firstname","listen"],"sources":["/Users/kaushiknag/trenthackathon/frontend/src/components/Main/index.jsx"],"sourcesContent":["require(\"dotenv\").config();\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst jwt = require('jsonwebtoken'); // Import JWT for authentication\nconst userRoutes = require('./routes/users');\nconst authRoutes = require(\"./routes/auth\");\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json()); // In case you need to handle JSON payloads\n\n// MongoDB URI\nconst uri = process.env.MONGODB_URI || \"your-mongodb-uri-here\";\n\nasync function connect() {\n    try {\n        await mongoose.connect(uri); // No need for useNewUrlParser or useUnifiedTopology\n        console.log(\"Connected to MongoDB\");\n    } catch (error) {\n        console.error(\"Error connecting to MongoDB:\", error.message);\n        process.exit(1); // Exit the process with failure if connection fails\n    }\n}\n\n// Start the MongoDB connection\nconnect();\n\n// Middleware to verify JWT and extract user ID (if using JWT)\nconst authenticateToken = (req, res, next) => {\n  const token = req.header('Authorization')?.split(' ')[1];\n  if (!token) return res.sendStatus(401);\n\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n\n// Route to get the first name of the logged-in user\napp.get('/api/users/firstname', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id); // Assuming req.user.id contains the user's ID\n    if (!user) return res.status(404).json({ message: 'User not found' });\n\n    res.json({ firstname: user.firstname });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// routes\napp.use(\"/api/users\", userRoutes);\napp.use(\"/api/auth\", authRoutes);\n\n// Start the server\napp.listen(8000, () => {\n    console.log(\"Server is running on port 8000\");\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}