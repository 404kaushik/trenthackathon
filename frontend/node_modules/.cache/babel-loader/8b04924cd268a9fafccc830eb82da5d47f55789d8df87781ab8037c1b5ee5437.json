{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100,\n  shootingStarCount = 5\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Create scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio); // Ensure native resolution\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create stars\n    const starGeometry = new THREE.BufferGeometry();\n    const starVertices = [];\n    for (let i = 0; i < starCount; i++) {\n      starVertices.push(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n    }\n    starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n    const starMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 2,\n      sizeAttenuation: true,\n      transparent: true,\n      opacity: 0.9\n    });\n    const stars = new THREE.Points(starGeometry, starMaterial);\n    scene.add(stars);\n\n    // Shooting Star creation\n    class ShootingStar {\n      constructor(start, end, color) {\n        this.start = start;\n        this.end = end;\n        this.color = color;\n        this.geometry = new THREE.BufferGeometry().setFromPoints([start, end]);\n        this.material = new THREE.ShaderMaterial({\n          uniforms: {\n            color: {\n              value: new THREE.Color(color)\n            },\n            time: {\n              value: 0\n            },\n            resolution: {\n              value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n            }\n          },\n          vertexShader: `\n                        varying vec3 vPosition;\n                        void main() {\n                            vPosition = position;\n                            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                        }\n                    `,\n          fragmentShader: `\n                        uniform vec3 color;\n                        uniform float time;\n                        varying vec3 vPosition;\n                        void main() {\n                            float alpha = 1.0 - (length(vPosition) / 1000.0);\n                            float intensity = 1.0 - length(vPosition) / 1000.0;\n                            vec3 glow = color * intensity * intensity;\n\n                            // Enhance the tail\n                            float tailIntensity = smoothstep(0.9, 0.7, length(vPosition));\n                            glow *= tailIntensity;\n\n                            // Brighter and more focused head\n                            float headIntensity = smoothstep(0.1, 0.0, length(vPosition));\n                            glow += color * headIntensity * 5.0;\n\n                            // Vary color along the tail\n                            glow *= mix(vec3(1.0, 1.0, 1.0), vec3(0.8, 0.8, 1.0), vPosition.z / 1000.0);\n\n                            gl_FragColor = vec4(glow, alpha);\n                        }\n                    `,\n          transparent: true,\n          blending: THREE.AdditiveBlending,\n          depthTest: false\n        });\n        this.line = new THREE.Line(this.geometry, this.material);\n        this.speed = 10 + Math.random() * 5;\n      }\n      update() {\n        const direction = new THREE.Vector3().subVectors(this.end, this.start).normalize();\n        this.line.position.add(direction.multiplyScalar(this.speed));\n        this.material.uniforms.time.value += 0.1;\n        if (this.line.position.distanceTo(this.end) < 10) {\n          return false;\n        }\n        return true;\n      }\n    }\n    const activeShootingStars = [];\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.rotation.x += 0.001;\n      stars.rotation.y += 0.001;\n      for (let i = activeShootingStars.length - 1; i >= 0; i--) {\n        if (!activeShootingStars[i].update()) {\n          scene.remove(activeShootingStars[i].line);\n          activeShootingStars.splice(i, 1);\n        }\n      }\n      if (Math.random() < 0.02) {\n        const start = new THREE.Vector3(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n        const end = new THREE.Vector3(start.x - 2000 * Math.random(), start.y - 2000 * Math.random(), start.z);\n        const color = ['#a1ffba', '#a1d2ff', '#fffaa1', '#ffa1a1'][Math.floor(Math.random() * 4)];\n        const shootingStar = new ShootingStar(start, end, color);\n        activeShootingStars.push(shootingStar);\n        scene.add(shootingStar.line);\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [starCount, shootingStarCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 12\n  }, this);\n};\n_s(Stars, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","Stars","starCount","shootingStarCount","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","current","appendChild","domElement","starGeometry","BufferGeometry","starVertices","i","push","MathUtils","randFloatSpread","setAttribute","Float32BufferAttribute","starMaterial","PointsMaterial","color","size","sizeAttenuation","transparent","opacity","stars","Points","add","ShootingStar","constructor","start","end","geometry","setFromPoints","material","ShaderMaterial","uniforms","value","Color","time","resolution","Vector2","vertexShader","fragmentShader","blending","AdditiveBlending","depthTest","line","Line","speed","Math","random","update","direction","Vector3","subVectors","normalize","position","multiplyScalar","distanceTo","activeShootingStars","z","animate","requestAnimationFrame","rotation","x","y","length","remove","splice","floor","shootingStar","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeChild","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst Stars = ({ starCount = 100, shootingStarCount = 5 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        // Create scene, camera, and renderer\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(window.devicePixelRatio); // Ensure native resolution\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Create stars\n        const starGeometry = new THREE.BufferGeometry();\n        const starVertices = [];\n        for (let i = 0; i < starCount; i++) {\n            starVertices.push(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n        }\n        starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n        const starMaterial = new THREE.PointsMaterial({\n            color: 0xffffff,\n            size: 2,\n            sizeAttenuation: true,\n            transparent: true,\n            opacity: 0.9,\n        });\n        const stars = new THREE.Points(starGeometry, starMaterial);\n        scene.add(stars);\n\n        // Shooting Star creation\n        class ShootingStar {\n            constructor(start, end, color) {\n                this.start = start;\n                this.end = end;\n                this.color = color;\n                this.geometry = new THREE.BufferGeometry().setFromPoints([start, end]);\n                this.material = new THREE.ShaderMaterial({\n                    uniforms: {\n                        color: { value: new THREE.Color(color) },\n                        time: { value: 0 },\n                        resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n                    },\n                    vertexShader: `\n                        varying vec3 vPosition;\n                        void main() {\n                            vPosition = position;\n                            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                        }\n                    `,\n                    fragmentShader: `\n                        uniform vec3 color;\n                        uniform float time;\n                        varying vec3 vPosition;\n                        void main() {\n                            float alpha = 1.0 - (length(vPosition) / 1000.0);\n                            float intensity = 1.0 - length(vPosition) / 1000.0;\n                            vec3 glow = color * intensity * intensity;\n\n                            // Enhance the tail\n                            float tailIntensity = smoothstep(0.9, 0.7, length(vPosition));\n                            glow *= tailIntensity;\n\n                            // Brighter and more focused head\n                            float headIntensity = smoothstep(0.1, 0.0, length(vPosition));\n                            glow += color * headIntensity * 5.0;\n\n                            // Vary color along the tail\n                            glow *= mix(vec3(1.0, 1.0, 1.0), vec3(0.8, 0.8, 1.0), vPosition.z / 1000.0);\n\n                            gl_FragColor = vec4(glow, alpha);\n                        }\n                    `,\n                    transparent: true,\n                    blending: THREE.AdditiveBlending,\n                    depthTest: false,\n                });\n\n                this.line = new THREE.Line(this.geometry, this.material);\n                this.speed = 10 + Math.random() * 5;\n            }\n\n            update() {\n                const direction = new THREE.Vector3().subVectors(this.end, this.start).normalize();\n                this.line.position.add(direction.multiplyScalar(this.speed));\n                this.material.uniforms.time.value += 0.1;\n\n                if (this.line.position.distanceTo(this.end) < 10) {\n                    return false;\n                }\n                return true;\n            }\n        }\n\n        const activeShootingStars = [];\n\n        // Set camera position\n        camera.position.z = 5;\n\n        // Animation loop\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            stars.rotation.x += 0.001;\n            stars.rotation.y += 0.001;\n\n            for (let i = activeShootingStars.length - 1; i >= 0; i--) {\n                if (!activeShootingStars[i].update()) {\n                    scene.remove(activeShootingStars[i].line);\n                    activeShootingStars.splice(i, 1);\n                }\n            }\n\n            if (Math.random() < 0.02) {\n                const start = new THREE.Vector3(\n                    THREE.MathUtils.randFloatSpread(2000),\n                    THREE.MathUtils.randFloatSpread(2000),\n                    THREE.MathUtils.randFloatSpread(2000)\n                );\n                const end = new THREE.Vector3(\n                    start.x - 2000 * Math.random(),\n                    start.y - 2000 * Math.random(),\n                    start.z\n                );\n                const color = ['#a1ffba', '#a1d2ff', '#fffaa1', '#ffa1a1'][Math.floor(Math.random() * 4)];\n                const shootingStar = new ShootingStar(start, end, color);\n                activeShootingStars.push(shootingStar);\n                scene.add(shootingStar.line);\n            }\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Handle window resize\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [starCount, shootingStarCount]);\n\n    return <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>;\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}