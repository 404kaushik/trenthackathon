{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100,\n  shootingStarCount = 5\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Create scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create stars\n    const starGeometry = new THREE.BufferGeometry();\n    const starVertices = [];\n    for (let i = 0; i < starCount; i++) {\n      starVertices.push(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n    }\n    starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n    const starMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 2,\n      sizeAttenuation: true,\n      transparent: true,\n      opacity: 0.9\n    });\n    const stars = new THREE.Points(starGeometry, starMaterial);\n    scene.add(stars);\n\n    // Create shooting star\n    const createShootingStar = () => {\n      const start = new THREE.Vector3(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n      const end = new THREE.Vector3(start.x - 2000 * Math.random(), start.y - 2000 * Math.random(), start.z);\n      const curve = new THREE.CatmullRomCurve3([start, end]);\n      const tubeGeometry = new THREE.TubeGeometry(curve, 64, 0.2, 8, false);\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          color: {\n            value: new THREE.Color(0xADD8E6)\n          },\n          time: {\n            value: 0\n          }\n        },\n        vertexShader: `\n                    varying vec3 vPosition;\n                    void main() {\n                        vPosition = position;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n        fragmentShader: `\n                    uniform vec3 color;\n                    uniform float time;\n                    varying vec3 vPosition;\n                    void main() {\n                        float alpha = 1.0 - (vPosition.z / 1000.0);\n                        vec3 glow = color * (1.0 - length(vPosition) / 1000.0);\n                        gl_FragColor = vec4(glow, alpha);\n                    }\n                `,\n        transparent: true,\n        blending: THREE.AdditiveBlending,\n        depthTest: false\n      });\n      const shootingStarLine = new THREE.Mesh(tubeGeometry, shaderMaterial);\n      scene.add(shootingStarLine);\n      return {\n        line: shootingStarLine,\n        speed: 10 + Math.random() * 5,\n        start,\n        end\n      };\n    };\n    const activeShootingStars = [];\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.rotation.x += 0.001;\n      stars.rotation.y += 0.001;\n      activeShootingStars.forEach((star, index) => {\n        const direction = new THREE.Vector3().subVectors(star.end, star.start).normalize();\n        star.line.position.add(direction.multiplyScalar(star.speed));\n        star.line.material.uniforms.time.value += 0.1;\n        if (star.line.position.distanceTo(star.end) < 10) {\n          scene.remove(star.line);\n          activeShootingStars.splice(index, 1);\n        }\n      });\n      if (Math.random() < 0.02) {\n        activeShootingStars.push(createShootingStar());\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [starCount, shootingStarCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 12\n  }, this);\n};\n_s(Stars, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","Stars","starCount","shootingStarCount","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","starGeometry","BufferGeometry","starVertices","i","push","MathUtils","randFloatSpread","setAttribute","Float32BufferAttribute","starMaterial","PointsMaterial","color","size","sizeAttenuation","transparent","opacity","stars","Points","add","createShootingStar","start","Vector3","end","x","Math","random","y","z","curve","CatmullRomCurve3","tubeGeometry","TubeGeometry","shaderMaterial","ShaderMaterial","uniforms","value","Color","time","vertexShader","fragmentShader","blending","AdditiveBlending","depthTest","shootingStarLine","Mesh","line","speed","activeShootingStars","position","animate","requestAnimationFrame","rotation","forEach","star","index","direction","subVectors","normalize","multiplyScalar","material","distanceTo","remove","splice","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeChild","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst Stars = ({ starCount = 100, shootingStarCount = 5 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        // Create scene, camera, and renderer\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Create stars\n        const starGeometry = new THREE.BufferGeometry();\n        const starVertices = [];\n        for (let i = 0; i < starCount; i++) {\n            starVertices.push(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n        }\n        starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n        const starMaterial = new THREE.PointsMaterial({\n            color: 0xffffff,\n            size: 2,\n            sizeAttenuation: true,\n            transparent: true,\n            opacity: 0.9,\n        });\n        const stars = new THREE.Points(starGeometry, starMaterial);\n        scene.add(stars);\n\n        // Create shooting star\n        const createShootingStar = () => {\n            const start = new THREE.Vector3(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n            const end = new THREE.Vector3(\n                start.x - 2000 * Math.random(),\n                start.y - 2000 * Math.random(),\n                start.z\n            );\n            const curve = new THREE.CatmullRomCurve3([start, end]);\n            const tubeGeometry = new THREE.TubeGeometry(curve, 64, 0.2, 8, false);\n            const shaderMaterial = new THREE.ShaderMaterial({\n                uniforms: {\n                    color: { value: new THREE.Color(0xADD8E6) },\n                    time: { value: 0 }\n                },\n                vertexShader: `\n                    varying vec3 vPosition;\n                    void main() {\n                        vPosition = position;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n                fragmentShader: `\n                    uniform vec3 color;\n                    uniform float time;\n                    varying vec3 vPosition;\n                    void main() {\n                        float alpha = 1.0 - (vPosition.z / 1000.0);\n                        vec3 glow = color * (1.0 - length(vPosition) / 1000.0);\n                        gl_FragColor = vec4(glow, alpha);\n                    }\n                `,\n                transparent: true,\n                blending: THREE.AdditiveBlending,\n                depthTest: false\n            });\n            const shootingStarLine = new THREE.Mesh(tubeGeometry, shaderMaterial);\n            scene.add(shootingStarLine);\n            return { line: shootingStarLine, speed: 10 + Math.random() * 5, start, end };\n        };\n\n        const activeShootingStars = [];\n\n        // Set camera position\n        camera.position.z = 5;\n\n        // Animation loop\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            stars.rotation.x += 0.001;\n            stars.rotation.y += 0.001;\n\n            activeShootingStars.forEach((star, index) => {\n                const direction = new THREE.Vector3().subVectors(star.end, star.start).normalize();\n                star.line.position.add(direction.multiplyScalar(star.speed));\n                star.line.material.uniforms.time.value += 0.1;\n\n                if (star.line.position.distanceTo(star.end) < 10) {\n                    scene.remove(star.line);\n                    activeShootingStars.splice(index, 1);\n                }\n            });\n\n            if (Math.random() < 0.02) {\n                activeShootingStars.push(createShootingStar());\n            }\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Handle window resize\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [starCount, shootingStarCount]);\n\n    return <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>;\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}