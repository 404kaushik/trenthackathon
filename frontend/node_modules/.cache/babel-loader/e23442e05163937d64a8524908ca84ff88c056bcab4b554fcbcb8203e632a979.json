{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Create scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio); // Ensure native resolution\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create stars\n    const starGeometry = new THREE.BufferGeometry();\n    const starVertices = [];\n    for (let i = 0; i < starCount; i++) {\n      starVertices.push(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n    }\n    starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n    const starMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 2,\n      sizeAttenuation: true,\n      transparent: true,\n      opacity: 0.9\n    });\n    const stars = new THREE.Points(starGeometry, starMaterial);\n    scene.add(stars);\n\n    // Shooting Star creation\n    class ShootingStar {\n      constructor() {\n        this.start = new THREE.Vector3(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n        this.end = new THREE.Vector3(this.start.x - 2000 * Math.random(), this.start.y - 2000 * Math.random(), this.start.z);\n        this.color = '#ffffff'; // Set color to white\n        this.geometry = new THREE.BufferGeometry().setFromPoints([this.start, this.end]);\n        this.material = new THREE.ShaderMaterial({\n          uniforms: {\n            color: {\n              value: new THREE.Color(this.color)\n            },\n            time: {\n              value: 0\n            }\n          },\n          vertexShader: `\n                varying vec3 vPosition;\n                void main() {\n                    vPosition = position;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n          fragmentShader: `\n                uniform vec3 color;\n                uniform float time;\n                varying vec3 vPosition;\n                void main() {\n                    float alpha = 1.0 - (length(vPosition) / 1000.0);\n                    float intensity = 1.0 - length(vPosition) / 1000.0;\n                    vec3 glow = color * intensity * intensity;\n\n                    // Enhance the tail\n                    float tailIntensity = smoothstep(0.9, 0.7, length(vPosition));\n                    glow *= tailIntensity;\n\n                    // Brighter and more focused head\n                    float headIntensity = smoothstep(0.1, 0.0, length(vPosition));\n                    glow += color * headIntensity * 10.0;\n\n                    // Vary color along the tail\n                    glow *= mix(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), vPosition.z / 1000.0);\n\n                    gl_FragColor = vec4(glow, alpha);\n                }\n            `,\n          transparent: true,\n          blending: THREE.AdditiveBlending,\n          depthTest: false\n        });\n        this.line = new THREE.Line(this.geometry, this.material);\n        this.speed = 10 + Math.random() * 5;\n        scene.add(this.line);\n      }\n      update() {\n        const direction = new THREE.Vector3().subVectors(this.end, this.start).normalize();\n        this.line.position.add(direction.multiplyScalar(this.speed));\n        this.material.uniforms.time.value += 0.1;\n        if (this.line.position.distanceTo(this.end) < 10) {\n          scene.remove(this.line);\n          return false;\n        }\n        return true;\n      }\n    }\n    const activeShootingStars = [];\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.rotation.x += 0.001;\n      stars.rotation.y += 0.001;\n      for (let i = activeShootingStars.length - 1; i >= 0; i--) {\n        if (!activeShootingStars[i].update()) {\n          activeShootingStars.splice(i, 1);\n        }\n      }\n      if (Math.random() < 0.02) {\n        activeShootingStars.push(new ShootingStar());\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      const {\n        innerWidth,\n        innerHeight\n      } = window;\n      camera.aspect = innerWidth / innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(innerWidth, innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [starCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 12\n  }, this);\n};\n_s(Stars, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","Stars","starCount","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","current","appendChild","domElement","starGeometry","BufferGeometry","starVertices","i","push","MathUtils","randFloatSpread","setAttribute","Float32BufferAttribute","starMaterial","PointsMaterial","color","size","sizeAttenuation","transparent","opacity","stars","Points","add","ShootingStar","constructor","start","Vector3","end","x","Math","random","y","z","geometry","setFromPoints","material","ShaderMaterial","uniforms","value","Color","time","vertexShader","fragmentShader","blending","AdditiveBlending","depthTest","line","Line","speed","update","direction","subVectors","normalize","position","multiplyScalar","distanceTo","remove","activeShootingStars","animate","requestAnimationFrame","rotation","length","splice","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeChild","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst Stars = ({ starCount = 100 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        // Create scene, camera, and renderer\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(window.devicePixelRatio); // Ensure native resolution\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Create stars\n        const starGeometry = new THREE.BufferGeometry();\n        const starVertices = [];\n        for (let i = 0; i < starCount; i++) {\n            starVertices.push(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n        }\n        starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n        const starMaterial = new THREE.PointsMaterial({\n            color: 0xffffff,\n            size: 2,\n            sizeAttenuation: true,\n            transparent: true,\n            opacity: 0.9,\n        });\n        const stars = new THREE.Points(starGeometry, starMaterial);\n        scene.add(stars);\n\n        // Shooting Star creation\n        class ShootingStar {\n    constructor() {\n        this.start = new THREE.Vector3(\n            THREE.MathUtils.randFloatSpread(2000),\n            THREE.MathUtils.randFloatSpread(2000),\n            THREE.MathUtils.randFloatSpread(2000)\n        );\n        this.end = new THREE.Vector3(\n            this.start.x - 2000 * Math.random(),\n            this.start.y - 2000 * Math.random(),\n            this.start.z\n        );\n        this.color = '#ffffff';  // Set color to white\n        this.geometry = new THREE.BufferGeometry().setFromPoints([this.start, this.end]);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: {\n                color: { value: new THREE.Color(this.color) },\n                time: { value: 0 },\n            },\n            vertexShader: `\n                varying vec3 vPosition;\n                void main() {\n                    vPosition = position;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform vec3 color;\n                uniform float time;\n                varying vec3 vPosition;\n                void main() {\n                    float alpha = 1.0 - (length(vPosition) / 1000.0);\n                    float intensity = 1.0 - length(vPosition) / 1000.0;\n                    vec3 glow = color * intensity * intensity;\n\n                    // Enhance the tail\n                    float tailIntensity = smoothstep(0.9, 0.7, length(vPosition));\n                    glow *= tailIntensity;\n\n                    // Brighter and more focused head\n                    float headIntensity = smoothstep(0.1, 0.0, length(vPosition));\n                    glow += color * headIntensity * 10.0;\n\n                    // Vary color along the tail\n                    glow *= mix(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), vPosition.z / 1000.0);\n\n                    gl_FragColor = vec4(glow, alpha);\n                }\n            `,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n        });\n\n        this.line = new THREE.Line(this.geometry, this.material);\n        this.speed = 10 + Math.random() * 5;\n        scene.add(this.line);\n    }\n\n    update() {\n        const direction = new THREE.Vector3().subVectors(this.end, this.start).normalize();\n        this.line.position.add(direction.multiplyScalar(this.speed));\n        this.material.uniforms.time.value += 0.1;\n\n        if (this.line.position.distanceTo(this.end) < 10) {\n            scene.remove(this.line);\n            return false;\n        }\n        return true;\n    }\n}\n\n\n        const activeShootingStars = [];\n\n        // Set camera position\n        camera.position.z = 5;\n\n        // Animation loop\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            stars.rotation.x += 0.001;\n            stars.rotation.y += 0.001;\n\n            for (let i = activeShootingStars.length - 1; i >= 0; i--) {\n                if (!activeShootingStars[i].update()) {\n                    activeShootingStars.splice(i, 1);\n                }\n            }\n\n            if (Math.random() < 0.02) {\n                activeShootingStars.push(new ShootingStar());\n            }\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Handle window resize\n        const handleResize = () => {\n            const { innerWidth, innerHeight } = window;\n            camera.aspect = innerWidth / innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(innerWidth, innerHeight);\n        };\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [starCount]);\n\n    return <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>;\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}