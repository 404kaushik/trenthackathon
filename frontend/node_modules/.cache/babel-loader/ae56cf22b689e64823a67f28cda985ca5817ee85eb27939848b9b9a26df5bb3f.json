{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 100\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    canvas.id = 'starsCanvas';\n    const ctx = canvas.getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    canvas.width = innerWidth * dpr;\n    canvas.height = innerHeight * dpr;\n    ctx.scale(dpr, dpr);\n    mountRef.current.appendChild(canvas);\n\n    // Constants for stars and shooting stars\n    const sNumber = starCount;\n    const sSize = 0.3;\n    const sSizeR = 0.6;\n    const sAlphaR = 0.5;\n    const shootingStarDensity = 0.01;\n    const shootingStarBaseXspeed = 30;\n    const shootingStarBaseYspeed = 15;\n    const shootingStarBaseLength = 8;\n    const shootingStarBaseLifespan = 60;\n    const shootingStarsColors = [\"#a1ffba\",\n    // greenish\n    \"#a1d2ff\",\n    // blueish\n    \"#fffaa1\",\n    // yellowish\n    \"#ffa1a1\" // redish\n    ];\n    let randomArray = [];\n    const randomArrayLength = 1000;\n    let randomArrayIterator = 0;\n    for (let i = 0; i < randomArrayLength; i++) {\n      randomArray[i] = Math.random();\n    }\n    let hueArray = [];\n    const hueArrayLength = 1000;\n    for (let i = 0; i < hueArrayLength; i++) {\n      let rHue = Math.floor(Math.random() * 160);\n      if (rHue > 60) rHue += 110;\n      hueArray[i] = rHue;\n    }\n    class Star {\n      constructor(x, y, size) {\n        this.x = x;\n        this.y = y;\n        this.size = size;\n        this.alpha = size / (sSize + sSizeR);\n        this.baseHue = hueArray[Math.floor(Math.random() * hueArrayLength)];\n        this.baseHueProportion = Math.random();\n        this.randomIndexa = Math.floor(Math.random() * randomArrayLength);\n        this.randomIndexh = this.randomIndexa;\n        this.randomValue = randomArray[this.randomIndexa];\n      }\n      draw() {\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n        let rAlpha = this.alpha + Math.min((this.randomValue - 0.5) * sAlphaR, 1);\n        let rHue = randomArray[this.randomIndexh] > this.baseHueProportion ? hueArray[this.randomIndexa] : this.baseHue;\n        this.color = \"hsla(\" + rHue + \",100%,85%,\" + rAlpha + \")\";\n        ctx.fillStyle = this.color;\n        ctx.fill();\n      }\n      update() {\n        this.randomIndexh = this.randomIndexa;\n        this.randomIndexa = this.randomIndexa >= 999 ? 0 : this.randomIndexa + 1;\n        this.randomValue = randomArray[this.randomIndexa];\n        this.draw();\n      }\n    }\n    class ShootingStar {\n      constructor(x, y, speedX, speedY, color) {\n        this.x = x;\n        this.y = y;\n        this.speedX = speedX;\n        this.speedY = speedY;\n        this.framesLeft = shootingStarBaseLifespan;\n        this.color = color;\n      }\n      goingOut() {\n        return this.framesLeft <= 0;\n      }\n      ageModifier() {\n        let halfLife = shootingStarBaseLifespan / 2.0;\n        return Math.pow(1.0 - Math.abs(this.framesLeft - halfLife) / halfLife, 2);\n      }\n      draw() {\n        let am = this.ageModifier();\n        let endX = this.x - this.speedX * shootingStarBaseLength * am;\n        let endY = this.y - this.speedY * shootingStarBaseLength * am;\n        let gradient = ctx.createLinearGradient(this.x, this.y, endX, endY);\n        gradient.addColorStop(0, \"#fff\");\n        gradient.addColorStop(Math.min(am, .7), this.color);\n        gradient.addColorStop(1, \"rgba(0,0,0,0)\");\n        ctx.strokeStyle = gradient;\n        ctx.beginPath();\n        ctx.moveTo(this.x, this.y);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n      }\n      update() {\n        this.framesLeft--;\n        this.x += this.speedX;\n        this.y += this.speedY;\n        this.draw();\n      }\n    }\n    let StarsArray = [];\n    for (let i = 0; i < sNumber; i++) {\n      let size = Math.random() * sSizeR + sSize;\n      let x = Math.random() * (innerWidth - size * 2 - size * 2) + size * 2;\n      let y = Math.random() * (innerHeight - size * 2 - size * 2) + size * 2;\n      StarsArray.push(new Star(x, y, size));\n    }\n    let ShootingStarsArray = [];\n    function animate() {\n      requestAnimationFrame(animate);\n      ctx.clearRect(0, 0, innerWidth, innerHeight);\n      for (let i = 0; i < StarsArray.length; i++) {\n        StarsArray[i].update();\n      }\n      if (randomArray[randomArrayIterator] < shootingStarDensity) {\n        let posX = Math.floor(Math.random() * canvas.width);\n        let posY = Math.floor(Math.random() * 150);\n        let speedX = Math.floor((Math.random() - .5) * shootingStarBaseXspeed);\n        let speedY = Math.floor(Math.random() * shootingStarBaseYspeed);\n        let color = shootingStarsColors[Math.floor(Math.random() * shootingStarsColors.length)];\n        ShootingStarsArray.push(new ShootingStar(posX, posY, speedX, speedY, color));\n      }\n      let arrayIterator = ShootingStarsArray.length - 1;\n      while (arrayIterator >= 0) {\n        if (ShootingStarsArray[arrayIterator].goingOut() === true) {\n          ShootingStarsArray.splice(arrayIterator, 1);\n        } else {\n          ShootingStarsArray[arrayIterator].update();\n        }\n        arrayIterator--;\n      }\n      if (randomArrayIterator + 1 >= randomArrayLength) {\n        randomArrayIterator = 0;\n      } else {\n        randomArrayIterator++;\n      }\n    }\n    animate();\n    const handleResize = () => {\n      const {\n        innerWidth,\n        innerHeight\n      } = window;\n      canvas.width = innerWidth * dpr;\n      canvas.height = innerHeight * dpr;\n      ctx.scale(dpr, dpr);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(canvas);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [starCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 12\n  }, this);\n};\n_s(Stars, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Stars","starCount","_s","mountRef","canvas","document","createElement","id","ctx","getContext","dpr","window","devicePixelRatio","innerWidth","innerHeight","width","height","scale","current","appendChild","sNumber","sSize","sSizeR","sAlphaR","shootingStarDensity","shootingStarBaseXspeed","shootingStarBaseYspeed","shootingStarBaseLength","shootingStarBaseLifespan","shootingStarsColors","randomArray","randomArrayLength","randomArrayIterator","i","Math","random","hueArray","hueArrayLength","rHue","floor","Star","constructor","x","y","size","alpha","baseHue","baseHueProportion","randomIndexa","randomIndexh","randomValue","draw","beginPath","arc","PI","rAlpha","min","color","fillStyle","fill","update","ShootingStar","speedX","speedY","framesLeft","goingOut","ageModifier","halfLife","pow","abs","am","endX","endY","gradient","createLinearGradient","addColorStop","strokeStyle","moveTo","lineTo","stroke","StarsArray","push","ShootingStarsArray","animate","requestAnimationFrame","clearRect","length","posX","posY","arrayIterator","splice","handleResize","addEventListener","removeChild","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst Stars = ({ starCount = 100 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = document.createElement('canvas');\n        canvas.id = 'starsCanvas';\n        const ctx = canvas.getContext('2d');\n        const dpr = window.devicePixelRatio || 1;\n        const { innerWidth, innerHeight } = window;\n        canvas.width = innerWidth * dpr;\n        canvas.height = innerHeight * dpr;\n        ctx.scale(dpr, dpr);\n        mountRef.current.appendChild(canvas);\n\n        // Constants for stars and shooting stars\n        const sNumber = starCount;\n        const sSize = 0.3;\n        const sSizeR = 0.6;\n        const sAlphaR = 0.5;\n        const shootingStarDensity = 0.01;\n        const shootingStarBaseXspeed = 30;\n        const shootingStarBaseYspeed = 15;\n        const shootingStarBaseLength = 8;\n        const shootingStarBaseLifespan = 60;\n        const shootingStarsColors = [\n            \"#a1ffba\", // greenish\n            \"#a1d2ff\", // blueish\n            \"#fffaa1\", // yellowish\n            \"#ffa1a1\"  // redish\n        ];\n\n        let randomArray = [];\n        const randomArrayLength = 1000;\n        let randomArrayIterator = 0;\n\n        for (let i = 0; i < randomArrayLength; i++) {\n            randomArray[i] = Math.random();\n        }\n\n        let hueArray = [];\n        const hueArrayLength = 1000;\n\n        for (let i = 0; i < hueArrayLength; i++) {\n            let rHue = Math.floor(Math.random() * 160);\n            if (rHue > 60) rHue += 110;\n            hueArray[i] = rHue;\n        }\n\n        class Star {\n            constructor(x, y, size) {\n                this.x = x;\n                this.y = y;\n                this.size = size;\n                this.alpha = size / (sSize + sSizeR);\n                this.baseHue = hueArray[Math.floor(Math.random() * hueArrayLength)];\n                this.baseHueProportion = Math.random();\n                this.randomIndexa = Math.floor(Math.random() * randomArrayLength);\n                this.randomIndexh = this.randomIndexa;\n                this.randomValue = randomArray[this.randomIndexa];\n            }\n\n            draw() {\n                ctx.beginPath();\n                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n                let rAlpha = this.alpha + Math.min((this.randomValue - 0.5) * sAlphaR, 1);\n                let rHue = randomArray[this.randomIndexh] > this.baseHueProportion ? hueArray[this.randomIndexa] : this.baseHue;\n                this.color = \"hsla(\" + rHue + \",100%,85%,\" + rAlpha + \")\";\n                ctx.fillStyle = this.color;\n                ctx.fill();\n            }\n\n            update() {\n                this.randomIndexh = this.randomIndexa;\n                this.randomIndexa = (this.randomIndexa >= 999) ? 0 : this.randomIndexa + 1;\n                this.randomValue = randomArray[this.randomIndexa];\n                this.draw();\n            }\n        }\n\n        class ShootingStar {\n            constructor(x, y, speedX, speedY, color) {\n                this.x = x;\n                this.y = y;\n                this.speedX = speedX;\n                this.speedY = speedY;\n                this.framesLeft = shootingStarBaseLifespan;\n                this.color = color;\n            }\n\n            goingOut() {\n                return this.framesLeft <= 0;\n            }\n\n            ageModifier() {\n                let halfLife = shootingStarBaseLifespan / 2.0;\n                return Math.pow(1.0 - Math.abs(this.framesLeft - halfLife) / halfLife, 2);\n            }\n\n            draw() {\n                let am = this.ageModifier();\n                let endX = this.x - this.speedX * shootingStarBaseLength * am;\n                let endY = this.y - this.speedY * shootingStarBaseLength * am;\n                let gradient = ctx.createLinearGradient(this.x, this.y, endX, endY);\n                gradient.addColorStop(0, \"#fff\");\n                gradient.addColorStop(Math.min(am, .7), this.color);\n                gradient.addColorStop(1, \"rgba(0,0,0,0)\");\n                ctx.strokeStyle = gradient;\n                ctx.beginPath();\n                ctx.moveTo(this.x, this.y);\n                ctx.lineTo(endX, endY);\n                ctx.stroke();\n            }\n\n            update() {\n                this.framesLeft--;\n                this.x += this.speedX;\n                this.y += this.speedY;\n                this.draw();\n            }\n        }\n\n        let StarsArray = [];\n        for (let i = 0; i < sNumber; i++) {\n            let size = (Math.random() * sSizeR) + sSize;\n            let x = Math.random() * ((innerWidth - size * 2) - (size * 2)) + size * 2;\n            let y = Math.random() * ((innerHeight - size * 2) - (size * 2)) + size * 2;\n            StarsArray.push(new Star(x, y, size));\n        }\n\n        let ShootingStarsArray = [];\n\n        function animate() {\n            requestAnimationFrame(animate);\n            ctx.clearRect(0, 0, innerWidth, innerHeight);\n\n            for (let i = 0; i < StarsArray.length; i++) {\n                StarsArray[i].update();\n            }\n\n            if (randomArray[randomArrayIterator] < shootingStarDensity) {\n                let posX = Math.floor(Math.random() * canvas.width);\n                let posY = Math.floor(Math.random() * 150);\n                let speedX = Math.floor((Math.random() - .5) * shootingStarBaseXspeed);\n                let speedY = Math.floor(Math.random() * shootingStarBaseYspeed);\n                let color = shootingStarsColors[Math.floor(Math.random() * shootingStarsColors.length)];\n                ShootingStarsArray.push(new ShootingStar(posX, posY, speedX, speedY, color));\n            }\n\n            let arrayIterator = ShootingStarsArray.length - 1;\n            while (arrayIterator >= 0) {\n                if (ShootingStarsArray[arrayIterator].goingOut() === true) {\n                    ShootingStarsArray.splice(arrayIterator, 1);\n                } else {\n                    ShootingStarsArray[arrayIterator].update();\n                }\n                arrayIterator--;\n            }\n\n            if (randomArrayIterator + 1 >= randomArrayLength) {\n                randomArrayIterator = 0;\n            } else {\n                randomArrayIterator++;\n            }\n        }\n\n        animate();\n\n        const handleResize = () => {\n            const { innerWidth, innerHeight } = window;\n            canvas.width = innerWidth * dpr;\n            canvas.height = innerHeight * dpr;\n            ctx.scale(dpr, dpr);\n        };\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(canvas);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [starCount]);\n\n    return <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>;\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}