{"ast":null,"code":"var _jsxFileName = \"/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = ({\n  starCount = 500,\n  shootingStarCount = 5\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    for (let i = 0; i < starCount; i++) {\n      vertices.push(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n    }\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    const material = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 2\n    });\n    const stars = new THREE.Points(geometry, material);\n    scene.add(stars);\n    const shootingStars = [];\n    const createShootingStar = () => {\n      const start = new THREE.Vector3(THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000), THREE.MathUtils.randFloatSpread(2000));\n      const end = new THREE.Vector3(start.x - 2000 * Math.random(), start.y - 2000 * Math.random(), start.z);\n      const curve = new THREE.CatmullRomCurve3([start, end]);\n      const tubeGeometry = new THREE.TubeGeometry(curve, 64, 0.5, 8, false);\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          color: {\n            value: new THREE.Color(0xffffff)\n          },\n          time: {\n            value: 0\n          }\n        },\n        vertexShader: `\n                    varying vec3 vPosition;\n                    void main() {\n                        vPosition = position;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n        fragmentShader: `\n                    uniform vec3 color;\n                    uniform float time;\n                    varying vec3 vPosition;\n                    void main() {\n                        float alpha = 1.0 - (vPosition.z / 1000.0);\n                        gl_FragColor = vec4(color, alpha);\n                    }\n                `,\n        transparent: true\n      });\n      const shootingStarLine = new THREE.Mesh(tubeGeometry, shaderMaterial);\n      scene.add(shootingStarLine);\n      return {\n        line: shootingStarLine,\n        speed: 5 + Math.random() * 5,\n        start,\n        end\n      };\n    };\n    const activeShootingStars = [];\n    camera.position.z = 5;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      stars.rotation.x += 0.001;\n      stars.rotation.y += 0.001;\n      activeShootingStars.forEach((star, index) => {\n        star.line.position.x += star.speed * (star.end.x - star.start.x) / 1000;\n        star.line.position.y += star.speed * (star.end.y - star.start.y) / 1000;\n        star.line.material.uniforms.time.value += 0.1;\n        if (star.line.position.distanceTo(star.end) < 10) {\n          scene.remove(star.line);\n          activeShootingStars.splice(index, 1);\n        }\n      });\n      if (Math.random() < 0.01) {\n        activeShootingStars.push(createShootingStar());\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [starCount, shootingStarCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 12\n  }, this);\n};\n_s(Stars, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Stars;\nexport default Stars;\nvar _c;\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","Stars","starCount","shootingStarCount","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","geometry","BufferGeometry","vertices","i","push","MathUtils","randFloatSpread","setAttribute","Float32BufferAttribute","material","PointsMaterial","color","size","stars","Points","add","shootingStars","createShootingStar","start","Vector3","end","x","Math","random","y","z","curve","CatmullRomCurve3","tubeGeometry","TubeGeometry","shaderMaterial","ShaderMaterial","uniforms","value","Color","time","vertexShader","fragmentShader","transparent","shootingStarLine","Mesh","line","speed","activeShootingStars","position","animate","requestAnimationFrame","rotation","forEach","star","index","distanceTo","remove","splice","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeChild","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaushiknag/trenthackathon/src/pages/Stars.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst Stars = ({ starCount = 500, shootingStarCount = 5 }) => {\n    const mountRef = useRef(null);\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current.appendChild(renderer.domElement);\n\n        const geometry = new THREE.BufferGeometry();\n        const vertices = [];\n\n        for (let i = 0; i < starCount; i++) {\n            vertices.push(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n        }\n\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n        const material = new THREE.PointsMaterial({ color: 0xffffff, size: 2 });\n        const stars = new THREE.Points(geometry, material);\n        scene.add(stars);\n\n        const shootingStars = [];\n\n        const createShootingStar = () => {\n            const start = new THREE.Vector3(\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000),\n                THREE.MathUtils.randFloatSpread(2000)\n            );\n\n            const end = new THREE.Vector3(\n                start.x - 2000 * Math.random(),\n                start.y - 2000 * Math.random(),\n                start.z\n            );\n\n            const curve = new THREE.CatmullRomCurve3([start, end]);\n            const tubeGeometry = new THREE.TubeGeometry(curve, 64, 0.5, 8, false);\n            const shaderMaterial = new THREE.ShaderMaterial({\n                uniforms: {\n                    color: { value: new THREE.Color(0xffffff) },\n                    time: { value: 0 }\n                },\n                vertexShader: `\n                    varying vec3 vPosition;\n                    void main() {\n                        vPosition = position;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n                fragmentShader: `\n                    uniform vec3 color;\n                    uniform float time;\n                    varying vec3 vPosition;\n                    void main() {\n                        float alpha = 1.0 - (vPosition.z / 1000.0);\n                        gl_FragColor = vec4(color, alpha);\n                    }\n                `,\n                transparent: true\n            });\n            const shootingStarLine = new THREE.Mesh(tubeGeometry, shaderMaterial);\n            scene.add(shootingStarLine);\n\n            return { line: shootingStarLine, speed: 5 + Math.random() * 5, start, end };\n        };\n\n        const activeShootingStars = [];\n\n        camera.position.z = 5;\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            stars.rotation.x += 0.001;\n            stars.rotation.y += 0.001;\n\n            activeShootingStars.forEach((star, index) => {\n                star.line.position.x += star.speed * (star.end.x - star.start.x) / 1000;\n                star.line.position.y += star.speed * (star.end.y - star.start.y) / 1000;\n                star.line.material.uniforms.time.value += 0.1;\n\n                if (star.line.position.distanceTo(star.end) < 10) {\n                    scene.remove(star.line);\n                    activeShootingStars.splice(index, 1);\n                }\n            });\n\n            if (Math.random() < 0.01) {\n                activeShootingStars.push(createShootingStar());\n            }\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [starCount, shootingStarCount]);\n\n    return <div ref={mountRef} className=\"sky-gradient fixed inset-0 overflow-hidden pointer-events-none\"></div>;\n};\n\nexport default Stars;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}